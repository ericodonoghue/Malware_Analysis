#include <stdio.h>
#include <Windows.h>


int print_32_bit_headers(const char* filePath) {
    IMAGE_DOS_HEADER dosHeader;
    IMAGE_NT_HEADERS32 ntHeader;

    // Open the file
    FILE* file = fopen(filePath, "rb");
    if (!file) {
        printf("Failed to open the file.\n");
        return 1;
    }

    // Read the DOS header
    if (fread(&dosHeader, sizeof(IMAGE_DOS_HEADER), 1, file) != 1) {
        fclose(file);
        printf("Failed to read the DOS header.\n");
        return 1;
    }

    // Seek to the NT header
    fseek(file, dosHeader.e_lfanew, SEEK_SET);

    // Read the NT header
    if (fread(&ntHeader, sizeof(IMAGE_NT_HEADERS32), 1, file) != 1) {
        fclose(file);
        printf("Failed to read the NT header.\n");
        return 1;
    }

    // Print the DOS and NT headers
    printf("DOS Header:\n");
    printf("e_magic: %hu\n", dosHeader.e_magic);
    printf("e_cblp: %hu\n", dosHeader.e_cblp);
    printf("e_cp: %hu\n", dosHeader.e_cp);
    printf("e_crlc: %hu\n", dosHeader.e_crlc);
    printf("e_cparhdr: %hu\n", dosHeader.e_cparhdr);
    printf("e_minalloc: %hu\n", dosHeader.e_minalloc);
    printf("e_maxalloc: %hu\n", dosHeader.e_maxalloc);
    printf("e_ss: %hu\n", dosHeader.e_ss);
    printf("e_sp: %hu\n", dosHeader.e_sp);
    printf("e_csum: %hu\n", dosHeader.e_csum);
    printf("e_ip: %hu\n", dosHeader.e_ip);
    printf("e_cs: %hu\n", dosHeader.e_cs);
    printf("e_lfarlc: %hu\n", dosHeader.e_lfarlc);
    printf("e_ovno: %hu\n", dosHeader.e_ovno);
    printf("e_res: %hu %hu %hu %hu\n", dosHeader.e_res[0],dosHeader.e_res[1],dosHeader.e_res[2],dosHeader.e_res[3]);
    printf("e_oemid: %hu\n", dosHeader.e_oemid);
    printf("e_oeminfo: %hu\n", dosHeader.e_oeminfo);
    printf("e_res2: %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu\n", dosHeader.e_res2[0], dosHeader.e_res2[1], dosHeader.e_res2[2], dosHeader.e_res2[3], dosHeader.e_res2[4], dosHeader.e_res2[5], dosHeader.e_res2[6], dosHeader.e_res2[7], dosHeader.e_res2[8], dosHeader.e_res2[9]);
    printf("e_lfanew: %hu\n", dosHeader.e_lfanew);

    printf("\n\nNT Header:\n");
    printf("Signature: %08X\n", ntHeader.Signature);
    printf("File Header:\n");
    printf("Machine: %hu\n", ntHeader.FileHeader.Machine);
    printf("NumberOfSections: %hu\n", ntHeader.FileHeader.NumberOfSections);
    printf("TimeDateStamp: %hu\n", ntHeader.FileHeader.TimeDateStamp);
    printf("PointerToSymbolTable: %hu\n", ntHeader.FileHeader.PointerToSymbolTable);
    printf("NumberOfSymbols: %hu\n", ntHeader.FileHeader.NumberOfSymbols);
    printf("SizeOfOptionalHeader: %hu\n", ntHeader.FileHeader.SizeOfOptionalHeader);
    printf("Characteristics: %hu\n", ntHeader.FileHeader.Characteristics);
    printf("Optional Header:\n");
    printf("Magic: %hu\n", ntHeader.OptionalHeader.Magic);
    printf("Major: %u\n", ntHeader.OptionalHeader.MajorLinkerVersion);
    printf("MinorLinkerVersion: %u\n", ntHeader.OptionalHeader.MinorLinkerVersion);
    printf("SizeOfCode: %lu\n", ntHeader.OptionalHeader.SizeOfCode);
    printf("SizeOfInitializedData: %lu\n", ntHeader.OptionalHeader.SizeOfInitializedData);
    printf("SizeOfUninitializedData: %lu\n", ntHeader.OptionalHeader.SizeOfUninitializedData);
    printf("AddressOfEntryPoint: %lu\n", ntHeader.OptionalHeader.AddressOfEntryPoint);
    printf("BaseOfCode: %lu\n", ntHeader.OptionalHeader.BaseOfCode);
    printf("BaseOfData: %lu\n", ntHeader.OptionalHeader.BaseOfData);
    printf("ImageBase: %lu\n", ntHeader.OptionalHeader.ImageBase);
    printf("SectionAlignment: %lu\n", ntHeader.OptionalHeader.SectionAlignment);
    printf("FileAlignment: %lu\n", ntHeader.OptionalHeader.FileAlignment);
    printf("MajorOperatingSystemVersion: %hu\n", ntHeader.OptionalHeader.MajorOperatingSystemVersion);
    printf("MinorOperatingSystemVersion: %hu\n", ntHeader.OptionalHeader.MinorOperatingSystemVersion);
    printf("MajorImageVersion: %hu\n", ntHeader.OptionalHeader.MajorImageVersion);
    printf("MinorImageVersion: %hu\n", ntHeader.OptionalHeader.MinorImageVersion);
    printf("MajorSubsystemVersion: %hu\n", ntHeader.OptionalHeader.MajorSubsystemVersion);
    printf("MinorSubsystemVersion: %hu\n", ntHeader.OptionalHeader.MinorSubsystemVersion);
    printf("Win32VersionValue: %lu\n", ntHeader.OptionalHeader.Win32VersionValue);
    printf("SizeOfImage: %lu\n", ntHeader.OptionalHeader.SizeOfImage);
    printf("SizeOfHeaders: %lu\n", ntHeader.OptionalHeader.SizeOfHeaders);
    printf("CheckSum: %lu\n", ntHeader.OptionalHeader.CheckSum);
    printf("Subsystem: %hu\n", ntHeader.OptionalHeader.Subsystem);
    printf("DllCharacteristics: %hu\n", ntHeader.OptionalHeader.DllCharacteristics);
    printf("SizeOfStackReserve: %lu\n", ntHeader.OptionalHeader.SizeOfStackReserve);
    printf("SizeOfStackCommit: %lu\n", ntHeader.OptionalHeader.SizeOfStackCommit);
    printf("SizeOfHeapReserve: %lu\n", ntHeader.OptionalHeader.SizeOfHeapReserve);
    printf("SizeOfHeapCommit: %lu\n", ntHeader.OptionalHeader.SizeOfHeapCommit);
    printf("LoaderFlags: %lu\n", ntHeader.OptionalHeader.LoaderFlags);
    printf("NumberOfRvaAndSizes: %lu\n", ntHeader.OptionalHeader.NumberOfRvaAndSizes);
    printf("Data Directory:\n");
    for (int i = 0; i < (sizeof(ntHeader.OptionalHeader.DataDirectory) / sizeof(ntHeader.OptionalHeader.DataDirectory[0])); i++) {
        printf("Entry %d - Virtual Address: %lu Size: %lu\n",i,ntHeader.OptionalHeader.DataDirectory[i].VirtualAddress, ntHeader.OptionalHeader.DataDirectory[i].Size);
    }

    // Print the section headers
    printf("\n\nSection Headers:\n");
    IMAGE_SECTION_HEADER sectionHeader;
    for (int i = 0; i < ntHeader.FileHeader.NumberOfSections; i++) {
        if (fread(&sectionHeader, sizeof(IMAGE_SECTION_HEADER), 1, file) != 1) {
            fclose(file);
            return 1;
        }
        printf("Section Name: %.8s\n", sectionHeader.Name);
        printf("Virtual Address: 0x%08X\n", sectionHeader.VirtualAddress);
        printf("Size of Raw Data: %u bytes\n\n", sectionHeader.SizeOfRawData);
    }

    fclose(file);
    return 0;

}

int print_64_bit_headers(const char* filePath) {
    IMAGE_DOS_HEADER dosHeader;
    IMAGE_NT_HEADERS64 ntHeader;

    // Open the file
    FILE* file = fopen(filePath, "rb");
    if (!file) {
        printf("Failed to open the file.\n");
        return 1;
    }

    // Read the DOS header
    if (fread(&dosHeader, sizeof(IMAGE_DOS_HEADER), 1, file) != 1) {
        fclose(file);
        printf("Failed to read the DOS header.\n");
        return 1;
    }

    // Seek to the NT header
    fseek(file, dosHeader.e_lfanew, SEEK_SET);

    // Read the NT header
    if (fread(&ntHeader, sizeof(IMAGE_NT_HEADERS64), 1, file) != 1) {
        fclose(file);
        printf("Failed to read the NT header.\n");
        return 1;
    }

    // Print the DOS and NT headers
    printf("DOS Header:\n");
    printf("e_magic: %hu\n", dosHeader.e_magic);
    printf("e_cblp: %hu\n", dosHeader.e_cblp);
    printf("e_cp: %hu\n", dosHeader.e_cp);
    printf("e_crlc: %hu\n", dosHeader.e_crlc);
    printf("e_cparhdr: %hu\n", dosHeader.e_cparhdr);
    printf("e_minalloc: %hu\n", dosHeader.e_minalloc);
    printf("e_maxalloc: %hu\n", dosHeader.e_maxalloc);
    printf("e_ss: %hu\n", dosHeader.e_ss);
    printf("e_sp: %hu\n", dosHeader.e_sp);
    printf("e_csum: %hu\n", dosHeader.e_csum);
    printf("e_ip: %hu\n", dosHeader.e_ip);
    printf("e_cs: %hu\n", dosHeader.e_cs);
    printf("e_lfarlc: %hu\n", dosHeader.e_lfarlc);
    printf("e_ovno: %hu\n", dosHeader.e_ovno);
    printf("e_res: %hu %hu %hu %hu\n", dosHeader.e_res[0], dosHeader.e_res[1], dosHeader.e_res[2], dosHeader.e_res[3]);
    printf("e_oemid: %hu\n", dosHeader.e_oemid);
    printf("e_oeminfo: %hu\n", dosHeader.e_oeminfo);
    printf("e_res2: %hu %hu %hu %hu %hu %hu %hu %hu %hu %hu\n", dosHeader.e_res2[0], dosHeader.e_res2[1], dosHeader.e_res2[2], dosHeader.e_res2[3], dosHeader.e_res2[4], dosHeader.e_res2[5], dosHeader.e_res2[6], dosHeader.e_res2[7], dosHeader.e_res2[8], dosHeader.e_res2[9]);
    printf("e_lfanew: %hu\n", dosHeader.e_lfanew);

    printf("\n\nNT Header:\n");
    printf("Signature: %08X\n", ntHeader.Signature);
    printf("File Header:\n");
    printf("Machine: %hu\n", ntHeader.FileHeader.Machine);
    printf("NumberOfSections: %hu\n", ntHeader.FileHeader.NumberOfSections);
    printf("TimeDateStamp: %hu\n", ntHeader.FileHeader.TimeDateStamp);
    printf("PointerToSymbolTable: %hu\n", ntHeader.FileHeader.PointerToSymbolTable);
    printf("NumberOfSymbols: %hu\n", ntHeader.FileHeader.NumberOfSymbols);
    printf("SizeOfOptionalHeader: %hu\n", ntHeader.FileHeader.SizeOfOptionalHeader);
    printf("Characteristics: %hu\n", ntHeader.FileHeader.Characteristics);
    printf("Optional Header:\n");
    printf("Magic: %hu\n", ntHeader.OptionalHeader.Magic);
    printf("Major: %u\n", ntHeader.OptionalHeader.MajorLinkerVersion);
    printf("MinorLinkerVersion: %u\n", ntHeader.OptionalHeader.MinorLinkerVersion);
    printf("SizeOfCode: %lu\n", ntHeader.OptionalHeader.SizeOfCode);
    printf("SizeOfInitializedData: %lu\n", ntHeader.OptionalHeader.SizeOfInitializedData);
    printf("SizeOfUninitializedData: %lu\n", ntHeader.OptionalHeader.SizeOfUninitializedData);
    printf("AddressOfEntryPoint: %lu\n", ntHeader.OptionalHeader.AddressOfEntryPoint);
    printf("BaseOfCode: %lu\n", ntHeader.OptionalHeader.BaseOfCode);
    //printf("BaseOfData: %lu\n", ntHeader.OptionalHeader.BaseOfData);
    printf("ImageBase: %llu\n", ntHeader.OptionalHeader.ImageBase);
    printf("SectionAlignment: %lu\n", ntHeader.OptionalHeader.SectionAlignment);
    printf("FileAlignment: %lu\n", ntHeader.OptionalHeader.FileAlignment);
    printf("MajorOperatingSystemVersion: %hu\n", ntHeader.OptionalHeader.MajorOperatingSystemVersion);
    printf("MinorOperatingSystemVersion: %hu\n", ntHeader.OptionalHeader.MinorOperatingSystemVersion);
    printf("MajorImageVersion: %hu\n", ntHeader.OptionalHeader.MajorImageVersion);
    printf("MinorImageVersion: %hu\n", ntHeader.OptionalHeader.MinorImageVersion);
    printf("MajorSubsystemVersion: %hu\n", ntHeader.OptionalHeader.MajorSubsystemVersion);
    printf("MinorSubsystemVersion: %hu\n", ntHeader.OptionalHeader.MinorSubsystemVersion);
    printf("Win32VersionValue: %lu\n", ntHeader.OptionalHeader.Win32VersionValue);
    printf("SizeOfImage: %lu\n", ntHeader.OptionalHeader.SizeOfImage);
    printf("SizeOfHeaders: %lu\n", ntHeader.OptionalHeader.SizeOfHeaders);
    printf("CheckSum: %lu\n", ntHeader.OptionalHeader.CheckSum);
    printf("Subsystem: %hu\n", ntHeader.OptionalHeader.Subsystem);
    printf("DllCharacteristics: %hu\n", ntHeader.OptionalHeader.DllCharacteristics);
    printf("SizeOfStackReserve: %llu\n", ntHeader.OptionalHeader.SizeOfStackReserve);
    printf("SizeOfStackCommit: %llu\n", ntHeader.OptionalHeader.SizeOfStackCommit);
    printf("SizeOfHeapReserve: %llu\n", ntHeader.OptionalHeader.SizeOfHeapReserve);
    printf("SizeOfHeapCommit: %llu\n", ntHeader.OptionalHeader.SizeOfHeapCommit);
    printf("LoaderFlags: %lu\n", ntHeader.OptionalHeader.LoaderFlags);
    printf("NumberOfRvaAndSizes: %lu\n", ntHeader.OptionalHeader.NumberOfRvaAndSizes);
    printf("Data Directory:\n");
    for (int i = 0; i < (sizeof(ntHeader.OptionalHeader.DataDirectory) / sizeof(ntHeader.OptionalHeader.DataDirectory[0])); i++) {
        printf("Entry %d - Virtual Address: %lu Size: %lu\n", i, ntHeader.OptionalHeader.DataDirectory[i].VirtualAddress, ntHeader.OptionalHeader.DataDirectory[i].Size);
    }

    // Print the section headers
    printf("\n\nSection Headers:\n");
    IMAGE_SECTION_HEADER sectionHeader;
    for (int i = 0; i < ntHeader.FileHeader.NumberOfSections; i++) {
        if (fread(&sectionHeader, sizeof(IMAGE_SECTION_HEADER), 1, file) != 1) {
            fclose(file);
            return 1;
        }
        printf("Section Name: %.8s\n", sectionHeader.Name);
        printf("Virtual Address: 0x%08X\n", sectionHeader.VirtualAddress);
        printf("Size of Raw Data: %u bytes\n\n", sectionHeader.SizeOfRawData);
    }

    fclose(file);
    return 0;
}


int main(int argc, char* argv[]) {

    if (argc != 2) {
        printf("Incorrect arugments - please provide a file path to an executable\n");
        return 1;
    }

    const char* filePath = argv[1];

    DWORD binaryType;
    if (GetBinaryTypeA(filePath, &binaryType)) {
        if (binaryType == SCS_32BIT_BINARY) {
            printf("The executable is 32-bit.\n");
            return print_32_bit_headers(filePath);
        }
        else if (binaryType == SCS_64BIT_BINARY) {
            printf("The executable is 64-bit.\n");
            return print_64_bit_headers(filePath);
        }
    }
    else {
        printf("Please provide valid path to an executable\n");
        return 1;
    }

    return 0;
}
