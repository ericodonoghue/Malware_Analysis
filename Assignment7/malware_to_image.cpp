#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <vector>
#include "fpng.h"
using namespace std;

int create_png_from_file(char* path, char* output)
{
	FILE* malware = fopen(path, "rb");

	if (malware == NULL) {
		printf("error opening file\n");
		return 1;
	}

	BYTE malware_byte;
	vector<BYTE> malware_0_255;
	while (fread(&malware_byte, sizeof(BYTE), 1, malware)) {
		malware_byte = malware_byte % 256;
		malware_0_255.push_back(malware_byte);
	}

	fseek(malware, 0, SEEK_END);
	long size = ftell(malware);

	fclose(malware);

	fpng::fpng_init();

	int width, height;

    if (size <= 10 * 1024) {
        width = 32;
        height = 312 + (size - 0) * (468 - 312) / (10 * 1024 - 0);
    }
    else if (size > 10 * 1024 && size <= 30 * 1024) {
        width = 64;
        height = 468 + (size - 10 * 1024) * (468 - 156) / (30 * 1024 - 10 * 1024);
    }
    else if (size > 30 * 1024 && size <= 60 * 1024) {
        width = 128;
        height = 468 + (size - 30 * 1024) * (520 - 234) / (60 * 1024 - 30 * 1024);
    }
    else if (size > 60 * 1024 && size <= 100 * 1024) {
        width = 256;
        height = 520 + (size - 60 * 1024) * (976 - 260) / (100 * 1024 - 60 * 1024);
    }
    else if (size > 100 * 1024 && size <= 200 * 1024) {
        width = 384;
        height = 976 + (size - 100 * 1024) * (976 - 390) / (200 * 1024 - 100 * 1024);
    }
    else if (size > 200 * 1024 && size <= 500 * 1024) {
        width = 512;
        height = 976 + (size - 200 * 1024) * (976 - 651) / (500 * 1024 - 200 * 1024);
    }
    else if (size > 500 * 1024 && size <= 1000 * 1024) {
        width = 768;
        height = 976 + (size - 500 * 1024) * (976 - 976) / (1000 * 1024 - 500 * 1024);
    }
    else if (size >= 1000 * 1024) {
        width = 1024;
        height = 976;
    }
		
	bool result = fpng::fpng_encode_image_to_file(output, malware_0_255.data(), width, height, 3, 0);

	return result;
}

int main(int argc, char* argv[]) {

	char* path = argv[1];
    char* output = argv[2];

	create_png_from_file(path, output);


	return 0;
}